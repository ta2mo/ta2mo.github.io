import{_ as n,x as c,z as a,J as r,B as t,C as o,g as e,y as s}from"./DWKNEfVt.js";const b={},v={class:"content is-medium"},E={class:"box"},u={class:"level"},h={class:"level-left is-left"},p={class:"level-item"},k={class:"level-right is-right"},A={class:"level-item"};function f(m,l){const d=e("adsbygoogle"),i=e("router-link");return s(),c("div",null,[a("div",v,[a("div",E,[l[0]||(l[0]=r('<span class="lable is-medium" data-v-a038b076>2015-01-17</span><h1 id="2015-01-17-docker-meetup-4" class="title" data-v-a038b076>Docker Meetup Tokyo #4に参加してきました</h1><div class="content" data-v-a038b076><p data-v-a038b076><a href="http://connpass.com/event/10318/" rel="nofollow" data-v-a038b076>Docker Meetup Tokyo #4</a>に参加してきたメモ</p><ul data-v-a038b076><li data-v-a038b076>感想 <ul data-v-a038b076><li data-v-a038b076>個人的にはDockerの監視がホットトピック。production環境で運用するためには必須。Host/Containerの両面みれるようにしないと監視対象が増えるだけでコストがペイしない。</li><li data-v-a038b076>kubernetesについての話題がちらほら。大規模ならばメリットでそう。個人的には思想は良さげだけどGoogle特有の概念とその名前がつらみ。</li><li data-v-a038b076>etcdとfleetは触っておこう。</li></ul></li></ul><p data-v-a038b076>以下、メモ。</p><h2 data-v-a038b076><a name="deeeetさん-coreosの基礎-coreosに期待すること" class="anchor" href="#deeeet%E3%81%95%E3%82%93-coreos%E3%81%AE%E5%9F%BA%E7%A4%8E-coreos%E3%81%AB%E6%9C%9F%E5%BE%85%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> @deeeetさん <a href="https://speakerdeck.com/tcnksm/coreoskurasutanidockerkontenawodepuroi-number-dockerjp" rel="nofollow" data-v-a038b076>CoreOSの基礎/CoreOSに期待すること</a></h2><h3 data-v-a038b076><a name="dockerのメリデメ" class="anchor" href="#docker%E3%81%AE%E3%83%A1%E3%83%AA%E3%83%87%E3%83%A1" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> Dockerのメリデメ</h3><ul data-v-a038b076><li data-v-a038b076>メリット</li><li data-v-a038b076>デメリット <ul data-v-a038b076><li data-v-a038b076>オーケストレーション：複数Host間の連携</li><li data-v-a038b076>死活監視</li></ul></li></ul><h3 data-v-a038b076><a name="coreos" class="anchor" href="#coreos" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> CoreOS</h3><ol data-v-a038b076><li data-v-a038b076>特徴 <ul data-v-a038b076><li data-v-a038b076>RAMの使用量114MB</li><li data-v-a038b076>書き込み不可なRootFS→updateが安全・容易</li></ul></li><li data-v-a038b076>技術 <ul data-v-a038b076><li data-v-a038b076>etcd <ul data-v-a038b076><li data-v-a038b076>分散キーバリューストア、コマンドライン/RESTのAPIを持つ</li></ul></li><li data-v-a038b076>fleet <ul data-v-a038b076><li data-v-a038b076>分散init system</li></ul></li><li data-v-a038b076>cloud-config <ul data-v-a038b076><li data-v-a038b076>CoreOSの初期設定</li></ul></li><li data-v-a038b076>TERAFORM <ul data-v-a038b076><li data-v-a038b076>インフラの起動/連携をコードで書ける</li><li data-v-a038b076>複数のクラウドプラットフォームを連携させる</li></ul></li></ul></li><li data-v-a038b076>利点</li><li data-v-a038b076>運用</li></ol><h3 data-v-a038b076><a name="感想" class="anchor" href="#%E6%84%9F%E6%83%B3" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> 感想</h3><ul data-v-a038b076><li data-v-a038b076>サービスを提供するコンテナと同時にサービスディスカバリー用のコンテナを上げる <ul data-v-a038b076><li data-v-a038b076>ディスカバリー用のコンテナ死んだらどうなるのだろう</li></ul></li></ul><h2 data-v-a038b076><a name="y-uuk1さん-webアプリケーションにおけるdockerパフォーマンスチューニング" class="anchor" href="#y-uuk1%E3%81%95%E3%82%93-web%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8Bdocker%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E3%83%81%E3%83%A5%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> @y_uuk1さん WebアプリケーションにおけるDockerパフォーマンスチューニング</h2><h3 data-v-a038b076><a name="dockerは性能劣化しないの" class="anchor" href="#docker%E3%81%AF%E6%80%A7%E8%83%BD%E5%8A%A3%E5%8C%96%E3%81%97%E3%81%AA%E3%81%84%E3%81%AE" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> Dockerは性能劣化しないの？</h3><ol data-v-a038b076><li data-v-a038b076>LXC <ul data-v-a038b076><li data-v-a038b076>オブジェクトの共有効率がよい</li><li data-v-a038b076>LXC vc XEN, KVM</li><li data-v-a038b076>UNION Filesystem</li><li data-v-a038b076>Devicemapper <ul data-v-a038b076><li data-v-a038b076>ブロックデバイスレベルの実装なのでfilesystemに依存しない</li></ul></li></ul></li><li data-v-a038b076>Volume <ul data-v-a038b076><li data-v-a038b076>コンテナ間でディレクトリを共有するためのもの</li></ul></li><li data-v-a038b076>Network <ul data-v-a038b076><li data-v-a038b076>Portmapper</li><li data-v-a038b076>コンテナ間通信やコンテナ-ホスト間はiptablesでNAT</li><li data-v-a038b076>Host Networking</li><li data-v-a038b076>コンテナ用のNetwork Namespaceを作らずにホスト側のを利用する</li></ul></li></ol><h3 data-v-a038b076><a name="isuconでの知見" class="anchor" href="#isucon%E3%81%A7%E3%81%AE%E7%9F%A5%E8%A6%8B" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> ISUCONでの知見</h3><ul data-v-a038b076><li data-v-a038b076>NginxとMySQLをDocker化 <ul data-v-a038b076><li data-v-a038b076>defaultとほぼ同じスコアに。</li><li data-v-a038b076>loopbackアドレスへくるとdocker-proxyと通信して遅くなった</li></ul></li></ul><h3 data-v-a038b076><a name="感想" class="anchor" href="#%E6%84%9F%E6%83%B3" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> 感想</h3><ul data-v-a038b076><li data-v-a038b076>aufs→devicemapperになってる</li></ul><h2 data-v-a038b076><a name="shot6さん-amazon-ec2-container-service-ecs" class="anchor" href="#shot6%E3%81%95%E3%82%93-amazon-ec2-container-service-ecs" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> @shot6さん <a href="http://www.slideshare.net/shot6/ecs-for-docker-meetup-4" rel="nofollow" data-v-a038b076>Amazon EC2 Container Service(ECS)</a></h2><h3 data-v-a038b076><a name="ecsとは" class="anchor" href="#ecs%E3%81%A8%E3%81%AF" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> ECSとは</h3><ul data-v-a038b076><li data-v-a038b076>Docker管理で面倒なところを面倒見てくれる</li></ul><h3 data-v-a038b076><a name="ecsのメリット" class="anchor" href="#ecs%E3%81%AE%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> ECSのメリット</h3><ul data-v-a038b076><li data-v-a038b076>Dockerのイメージをそのまま利用可能</li><li data-v-a038b076>OSも制約がない</li><li data-v-a038b076>AWSのセキュリティ機構が使える</li></ul><h3 data-v-a038b076><a name="ecsの仕組み" class="anchor" href="#ecs%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> ECSの仕組み</h3><ul data-v-a038b076><li data-v-a038b076>Cluster <ul data-v-a038b076><li data-v-a038b076>リソースプール、管理するトップレベルの概念</li></ul></li><li data-v-a038b076>Container Instance <ul data-v-a038b076><li data-v-a038b076>EC2</li><li data-v-a038b076>ECS Agentが一コンテナとして起動する</li></ul></li><li data-v-a038b076>Task <ul data-v-a038b076><li data-v-a038b076>Unit of Work</li><li data-v-a038b076>複数のコンテナをまとめた概念</li><li data-v-a038b076>JSONでTask Definitionを書く</li><li data-v-a038b076>ECSのスケジューラにまかせてコンテナ起動(ポートやリソースの空きを見てくれる)</li><li data-v-a038b076>自分で指定したコンテナに起動する</li></ul></li></ul><h2 data-v-a038b076><a name="yuguiさん-kubernetesの機能とデモ-開発体制について" class="anchor" href="#yugui%E3%81%95%E3%82%93-kubernetes%E3%81%AE%E6%A9%9F%E8%83%BD%E3%81%A8%E3%83%87%E3%83%A2-%E9%96%8B%E7%99%BA%E4%BD%93%E5%88%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> @yuguiさん Kubernetesの機能とデモ、開発体制について</h2><h3 data-v-a038b076><a name="kubernetesとは" class="anchor" href="#kubernetes%E3%81%A8%E3%81%AF" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> Kubernetesとは</h3><ul data-v-a038b076><li data-v-a038b076>OSS</li><li data-v-a038b076>Pod ≠ Container <ul data-v-a038b076><li data-v-a038b076>Containerの組み合わせ、集合</li><li data-v-a038b076>同じインスタンスで走らせたいContainer集合</li></ul></li></ul><h3 data-v-a038b076><a name="アーキテクチャ" class="anchor" href="#%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> アーキテクチャ</h3><ul data-v-a038b076><li data-v-a038b076>etcdを中心にAPIserver、ControllerManager、Schedulerがごにょごにょする</li></ul><h3 data-v-a038b076><a name="kubernetesのメリット" class="anchor" href="#kubernetes%E3%81%AE%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> Kubernetesのメリット</h3><ul data-v-a038b076><li data-v-a038b076>Common Technology</li><li data-v-a038b076>Well design by Google <ul data-v-a038b076><li data-v-a038b076>Googleのコンテナ利用の知見が盛り込まれている。</li><li data-v-a038b076>e.g. ポートの管理ができない規模でうまくやる仕組み</li></ul></li><li data-v-a038b076>Fast-moving</li><li data-v-a038b076>Open-minded</li></ul><h2 data-v-a038b076><a name="ten-forwardさん-cgroupによるリソース隔離入門" class="anchor" href="#ten-forward%E3%81%95%E3%82%93-cgroup%E3%81%AB%E3%82%88%E3%82%8B%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E9%9A%94%E9%9B%A2%E5%85%A5%E9%96%80" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> @ten_forwardさん <a href="https://speakerdeck.com/tenforward/cgroupniyorurisosuge-li-ru-men-2015-01-17" rel="nofollow" data-v-a038b076>cgroupによるリソース隔離入門</a></h2><h3 data-v-a038b076><a name="cgroupを使ってdockerのリソースを隔離するには" class="anchor" href="#cgroup%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6docker%E3%81%AE%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%92%E9%9A%94%E9%9B%A2%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> Cgroupを使ってDockerのリソースを隔離するには</h3><ul data-v-a038b076><li data-v-a038b076><p data-v-a038b076>Cgroupとは</p><ul data-v-a038b076><li data-v-a038b076>CPU、メモリなどのリソースを制限・隔離する</li><li data-v-a038b076>e.g. CPUリソースをコンテナ毎に10:1にする、絶対量で指定する etc....</li></ul></li><li data-v-a038b076><p data-v-a038b076>Cgroupを使ったリソース隔離方法</p><ul data-v-a038b076><li data-v-a038b076>docker</li><li data-v-a038b076>cgroupfs直接</li><li data-v-a038b076>systemd</li></ul></li></ul><h2 data-v-a038b076><a name="yuryuさん-redhat-atomic-hostの話" class="anchor" href="#yuryu%E3%81%95%E3%82%93-redhat-atomic-host%E3%81%AE%E8%A9%B1" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> @yuryuさん <a href="http://www.slideshare.net/Yuryu/docker-on-project-atomic-docker-meetup-4" rel="nofollow" data-v-a038b076>RedHat atomic hostの話</a></h2><h3 data-v-a038b076><a name="redhatとdocker" class="anchor" href="#redhat%E3%81%A8docker" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> RedHatとDocker</h3><ul data-v-a038b076><li data-v-a038b076>RedHat7でDocker正式サポート <ul data-v-a038b076><li data-v-a038b076>Extrasチャンネル</li><li data-v-a038b076>常に最新版を使えるようにrebaseする</li><li data-v-a038b076>リリース間隔も短い</li><li data-v-a038b076>ミッションクリティカル非推奨</li><li data-v-a038b076>頻繁にrebase/リリースされるため</li><li data-v-a038b076>サポートが限定的</li></ul></li></ul><h3 data-v-a038b076><a name="project-atomic" class="anchor" href="#project-atomic" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> Project Atomic</h3><ul data-v-a038b076><li data-v-a038b076>Atomic Hostを使っているプロジェクト</li><li data-v-a038b076>小さなOS + コンテナのためのツールをセットで提供</li><li data-v-a038b076>Fedora Atomic</li><li data-v-a038b076>RHEL Atomic Host <ul data-v-a038b076><li data-v-a038b076>商用バンでサポート付き安定版</li></ul></li><li data-v-a038b076><p data-v-a038b076>CentOS Atomic Host</p><ul data-v-a038b076><li data-v-a038b076>RHEL Atomicとは関係せずに開発</li></ul></li><li data-v-a038b076><p data-v-a038b076>CoreOS都の違い</p><ul data-v-a038b076><li data-v-a038b076>CoreOS:etcd, fleetを利用。コンテナ向けに１から作られている。</li><li data-v-a038b076>Atomic Host:etcd, kubernetesを利用。既存のOSをコンテナに最適化。</li></ul></li><li data-v-a038b076><p data-v-a038b076>RHELとAtomic Hostの違い</p><ul data-v-a038b076><li data-v-a038b076>yumが無い</li><li data-v-a038b076>OS自体はrpm-ostreeでupdate/rollback</li><li data-v-a038b076>Docker, etcd, kubernetesが標準で入る</li></ul></li></ul><h3 data-v-a038b076><a name="感想" class="anchor" href="#%E6%84%9F%E6%83%B3" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> 感想</h3><ul data-v-a038b076><li data-v-a038b076>RHEL→レルと読んでた。こんどからレルと言ってみよう。</li><li data-v-a038b076>現状はαバージョン。URLが非公式感ただようにツボ。</li></ul><h2 data-v-a038b076><a name="spesnovaさん-docker-at-wantedly" class="anchor" href="#spesnova%E3%81%95%E3%82%93-docker-at-wantedly" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> @spesnovaさん Docker at Wantedly</h2><h3 data-v-a038b076><a name="dockerを本番環境で動かしての知見" class="anchor" href="#docker%E3%82%92%E6%9C%AC%E7%95%AA%E7%92%B0%E5%A2%83%E3%81%A7%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%AE%E7%9F%A5%E8%A6%8B" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> Dockerを本番環境で動かしての知見</h3><ul data-v-a038b076><li data-v-a038b076><p data-v-a038b076>Herokuの時の構成</p><ul data-v-a038b076><li data-v-a038b076>web</li><li data-v-a038b076>worker</li><li data-v-a038b076>scheduler</li><li data-v-a038b076>on-off</li><li data-v-a038b076>db:migrationとかを一度だけ実行する短命なコンテナ</li></ul></li><li data-v-a038b076><p data-v-a038b076>AWS移行 + Dockerへ</p><ul data-v-a038b076><li data-v-a038b076>Elastic beanstalk -&gt; Capistrano3</li><li data-v-a038b076>スタティックにオーケストレーション &lt;-&gt; 開いてるホストにコンテナデプロイ</li><li data-v-a038b076>Centurion -&gt; chef</li><li data-v-a038b076>Chef with Docker -&gt; packer</li></ul></li><li data-v-a038b076><p data-v-a038b076>知見</p><ul data-v-a038b076><li data-v-a038b076>Dockerfileをそのまま使おう</li><li data-v-a038b076>Chef+Packer: キャッシュが欲しくなる、必要なツールが多い</li><li data-v-a038b076>Dockerfileの動的生成はつらい</li><li data-v-a038b076>Dockerホストは軽量にしておこう</li><li data-v-a038b076>herokuから学んだ</li><li data-v-a038b076>on-offコンテナ</li><li data-v-a038b076>設定は環境変数で渡す</li><li data-v-a038b076>1コンテナ1プロセス</li><li data-v-a038b076>ログはstdout/stderrへ、専用コンテナでログ収集</li><li data-v-a038b076>できるだけ全てコンテナでやる</li></ul></li></ul><h2 data-v-a038b076><a name="ixixiさん-development-and-deployment-with-docker-at-dwango" class="anchor" href="#ixixi%E3%81%95%E3%82%93-development-and-deployment-with-docker-at-dwango" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> @ixixiさん <a href="https://speakerdeck.com/ixixi/d-evelopment-and-deployment-with-docker-at-dwango" rel="nofollow" data-v-a038b076>Development and Deployment with Docker at Dwango</a></h2><ul data-v-a038b076><li data-v-a038b076>レコメンドの確認したい <ul data-v-a038b076><li data-v-a038b076>実際に投入しないとわかりづらい</li><li data-v-a038b076>Unitテストではわからない</li></ul></li></ul><h2 data-v-a038b076><a name="kazunori-279-google-container-engineについて" class="anchor" href="#kazunori-279-google-container-engine%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> @kazunori_279 Google Container Engineについて</h2><ul data-v-a038b076><li data-v-a038b076>GKE <ul data-v-a038b076><li data-v-a038b076>full managed serviceのkubernetes</li></ul></li></ul><h2 data-v-a038b076><a name="datadogさんのlt" class="anchor" href="#datadog%E3%81%95%E3%82%93%E3%81%AElt" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> DatadogさんのLT</h2><ul data-v-a038b076><li data-v-a038b076>コンテナの状況を把握できてますか？</li><li data-v-a038b076>dockerのユースケース <ul data-v-a038b076><li data-v-a038b076>CI</li><li data-v-a038b076>Continuous Delivaly</li></ul></li><li data-v-a038b076>平均5コンテナ/ホスト <ul data-v-a038b076><li data-v-a038b076>いずれコンテナ密度があがるのでは？</li></ul></li><li data-v-a038b076>はじめから監視の仕組みを考えよう</li></ul><h2 data-v-a038b076><a name="inutさん-共用スパコンシステム上でデータ解析-with-docker" class="anchor" href="#inut%E3%81%95%E3%82%93-%E5%85%B1%E7%94%A8%E3%82%B9%E3%83%91%E3%82%B3%E3%83%B3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E4%B8%8A%E3%81%A7%E3%83%87%E3%83%BC%E3%82%BF%E8%A7%A3%E6%9E%90-with-docker" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> @iNutさん <a href="https://speakerdeck.com/inutano/large-scale-biological-data-science-with-docker" rel="nofollow" data-v-a038b076>共用スパコンシステム上でデータ解析 with Docker</a></h2><h3 data-v-a038b076><a name="感想" class="anchor" href="#%E6%84%9F%E6%83%B3" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> 感想</h3><ul data-v-a038b076><li data-v-a038b076>TLであったようにDockerfileへのリンクが論文にあったら再現性とか高そう。この発想はいろんなところで使えそう。</li></ul><h2 data-v-a038b076><a name="ianmlewisさん-dockerapiをgoから使う" class="anchor" href="#ianmlewis%E3%81%95%E3%82%93-dockerapi%E3%82%92go%E3%81%8B%E3%82%89%E4%BD%BF%E3%81%86" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> @IanMLewisさん [DockerAPIをGoから使う]()</h2><ul data-v-a038b076><li data-v-a038b076>RemoteAPI <ul data-v-a038b076><li data-v-a038b076>Kubernetesが使っているGoのAPIを紹介する</li></ul></li></ul><h2 data-v-a038b076><a name="takiponeさん-docker-ecsでiamロールを利用する" class="anchor" href="#takipone%E3%81%95%E3%82%93-docker-ecs%E3%81%A7iam%E3%83%AD%E3%83%BC%E3%83%AB%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> @takiponeさん Docker/ECSでIAMロールを利用する</h2><ul data-v-a038b076><li data-v-a038b076>クラウド側で持っているサービスを利用してクレデンシャルを外出しする</li><li data-v-a038b076>コンテナとインスタンスの区別ができない</li></ul><h2 data-v-a038b076><a name="mookさん-gitのコミットごとにqa環境を作成するプロキシを作ってみた" class="anchor" href="#mook%E3%81%95%E3%82%93-git%E3%81%AE%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%81%94%E3%81%A8%E3%81%ABqa%E7%92%B0%E5%A2%83%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> Mookさん GitのコミットごとにQA環境を作成するプロキシを作ってみた</h2><ul data-v-a038b076><li data-v-a038b076><p data-v-a038b076>poolというプロダクト</p><ul data-v-a038b076><li data-v-a038b076>コミットやブランチに対応する検証用コンテナが立ち上がる</li></ul></li><li data-v-a038b076><p data-v-a038b076>prevs.io</p></li></ul><h3 data-v-a038b076><a name="感想" class="anchor" href="#%E6%84%9F%E6%83%B3" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> 感想</h3><ul data-v-a038b076><li data-v-a038b076>アクセスが来た単位で見せれる画面が上がるのは凄い良い。マネージャが見たいといった時に最新のコードからすぐに見せれる。</li><li data-v-a038b076>PR毎に画面ですぐに確認できたら嬉しいよね。</li></ul><h2 data-v-a038b076><a name="ytnobodyさん-tutumで雑に包んで雑にデプロイ" class="anchor" href="#ytnobody%E3%81%95%E3%82%93-tutum%E3%81%A7%E9%9B%91%E3%81%AB%E5%8C%85%E3%82%93%E3%81%A7%E9%9B%91%E3%81%AB%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> @ytnobodyさん tutumで雑に包んで雑にデプロイ</h2><h3 data-v-a038b076><a name="感想" class="anchor" href="#%E6%84%9F%E6%83%B3" rel="nofollow" aria-hidden="true" data-v-a038b076><span class="octicon octicon-link" data-v-a038b076></span></a> 感想</h3><ul data-v-a038b076><li data-v-a038b076>tutum良さそう。コンテナをちょろっと見せたいときに良さげ。</li><li data-v-a038b076>監視画面あるのが嬉しい</li></ul></div>',3)),t(d)])]),a("nav",u,[a("div",h,[a("div",p,[t(i,{class:"is-right is-pulled-left",to:"/post/2018-11-09-blog-renewal"},{default:o(()=>l[1]||(l[1]=[a("p",{class:"heading"},"←Newer",-1),a("span",null,"Nuxt.jsを使ってブログをリニューアルしました",-1)])),_:1,__:[1]})])]),a("div",k,[a("div",A,[t(i,{class:"is-left",to:"/post/2014-08-31-api-meetup-tokyo-number-2"},{default:o(()=>l[2]||(l[2]=[a("p",{class:"heading"},"Older→",-1),a("span",null,"API Meetup Tokyo #2に参加してきました",-1)])),_:1,__:[2]})])])])])}const w=n(b,[["render",f],["__scopeId","data-v-a038b076"]]);export{w as default};
